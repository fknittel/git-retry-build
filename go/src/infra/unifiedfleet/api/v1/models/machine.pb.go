// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: infra/unifiedfleet/api/v1/models/machine.proto

package ufspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChromeOSDeviceType refers to the different types of
// device/machine in the Chrome OS lab
type ChromeOSDeviceType int32

const (
	ChromeOSDeviceType_CHROME_OS_DEVICE_TYPE_UNSPECIFIED ChromeOSDeviceType = 0
	ChromeOSDeviceType_DEVICE_CHROMEBOOK                 ChromeOSDeviceType = 1
	ChromeOSDeviceType_DEVICE_LABSTATION                 ChromeOSDeviceType = 2
	ChromeOSDeviceType_DEVICE_SERVO                      ChromeOSDeviceType = 3
)

// Enum value maps for ChromeOSDeviceType.
var (
	ChromeOSDeviceType_name = map[int32]string{
		0: "CHROME_OS_DEVICE_TYPE_UNSPECIFIED",
		1: "DEVICE_CHROMEBOOK",
		2: "DEVICE_LABSTATION",
		3: "DEVICE_SERVO",
	}
	ChromeOSDeviceType_value = map[string]int32{
		"CHROME_OS_DEVICE_TYPE_UNSPECIFIED": 0,
		"DEVICE_CHROMEBOOK":                 1,
		"DEVICE_LABSTATION":                 2,
		"DEVICE_SERVO":                      3,
	}
)

func (x ChromeOSDeviceType) Enum() *ChromeOSDeviceType {
	p := new(ChromeOSDeviceType)
	*p = x
	return p
}

func (x ChromeOSDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeOSDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_enumTypes[0].Descriptor()
}

func (ChromeOSDeviceType) Type() protoreflect.EnumType {
	return &file_infra_unifiedfleet_api_v1_models_machine_proto_enumTypes[0]
}

func (x ChromeOSDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChromeOSDeviceType.Descriptor instead.
func (ChromeOSDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{0}
}

// AttachedDeviceType refers to the different types of device/machine in the
// lab environment.
//
// Next Tag: 7
type AttachedDeviceType int32

const (
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_UNSPECIFIED    AttachedDeviceType = 0
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_APPLE_PHONE    AttachedDeviceType = 1
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_ANDROID_PHONE  AttachedDeviceType = 2
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_APPLE_TABLET   AttachedDeviceType = 3
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_ANDROID_TABLET AttachedDeviceType = 4
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_DEVBOARD       AttachedDeviceType = 5
	AttachedDeviceType_ATTACHED_DEVICE_TYPE_JETSTREAM      AttachedDeviceType = 6
)

// Enum value maps for AttachedDeviceType.
var (
	AttachedDeviceType_name = map[int32]string{
		0: "ATTACHED_DEVICE_TYPE_UNSPECIFIED",
		1: "ATTACHED_DEVICE_TYPE_APPLE_PHONE",
		2: "ATTACHED_DEVICE_TYPE_ANDROID_PHONE",
		3: "ATTACHED_DEVICE_TYPE_APPLE_TABLET",
		4: "ATTACHED_DEVICE_TYPE_ANDROID_TABLET",
		5: "ATTACHED_DEVICE_TYPE_DEVBOARD",
		6: "ATTACHED_DEVICE_TYPE_JETSTREAM",
	}
	AttachedDeviceType_value = map[string]int32{
		"ATTACHED_DEVICE_TYPE_UNSPECIFIED":    0,
		"ATTACHED_DEVICE_TYPE_APPLE_PHONE":    1,
		"ATTACHED_DEVICE_TYPE_ANDROID_PHONE":  2,
		"ATTACHED_DEVICE_TYPE_APPLE_TABLET":   3,
		"ATTACHED_DEVICE_TYPE_ANDROID_TABLET": 4,
		"ATTACHED_DEVICE_TYPE_DEVBOARD":       5,
		"ATTACHED_DEVICE_TYPE_JETSTREAM":      6,
	}
)

func (x AttachedDeviceType) Enum() *AttachedDeviceType {
	p := new(AttachedDeviceType)
	*p = x
	return p
}

func (x AttachedDeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachedDeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_enumTypes[1].Descriptor()
}

func (AttachedDeviceType) Type() protoreflect.EnumType {
	return &file_infra_unifiedfleet_api_v1_models_machine_proto_enumTypes[1]
}

func (x AttachedDeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachedDeviceType.Descriptor instead.
func (AttachedDeviceType) EnumDescriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{1}
}

// Machine refers to the devices or bare metal servers
// which serves the tests directly.
//
// Next Tag: 13
type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique name for the machine.
	//   * AssetTag for ChromeOS machine (device)
	//   * Serial number for Chrome machine for now (server) (Ideally it should be assetTag once itâ€™s ready)
	// The format will be machines/asset:XXX or machines/sn:XXX
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// serial_number of the machine.
	// for chromeOS machine, user is not allowed to update this field.
	// SSW will update this field.
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Location details of where the machine is placed
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are assignable to Device:
	//	*Machine_ChromeBrowserMachine
	//	*Machine_ChromeosMachine
	//	*Machine_AttachedDevice
	//	*Machine_Devboard
	Device isMachine_Device `protobuf_oneof:"device"`
	// Record the last update timestamp of this machine (In UTC timezone)
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Record the ACL info of the machine
	Realm string `protobuf:"bytes,7,opt,name=realm,proto3" json:"realm,omitempty"`
	// tags user can attach for easy querying/searching
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// State of the machine
	ResourceState State `protobuf:"varint,10,opt,name=resource_state,json=resourceState,proto3,enum=unifiedfleet.api.v1.models.State" json:"resource_state,omitempty"`
	// Asset tag of the machine
	AssetTag string `protobuf:"bytes,12,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{0}
}

func (x *Machine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Machine) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Machine) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (m *Machine) GetDevice() isMachine_Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (x *Machine) GetChromeBrowserMachine() *ChromeBrowserMachine {
	if x, ok := x.GetDevice().(*Machine_ChromeBrowserMachine); ok {
		return x.ChromeBrowserMachine
	}
	return nil
}

func (x *Machine) GetChromeosMachine() *ChromeOSMachine {
	if x, ok := x.GetDevice().(*Machine_ChromeosMachine); ok {
		return x.ChromeosMachine
	}
	return nil
}

func (x *Machine) GetAttachedDevice() *AttachedDevice {
	if x, ok := x.GetDevice().(*Machine_AttachedDevice); ok {
		return x.AttachedDevice
	}
	return nil
}

func (x *Machine) GetDevboard() *Devboard {
	if x, ok := x.GetDevice().(*Machine_Devboard); ok {
		return x.Devboard
	}
	return nil
}

func (x *Machine) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Machine) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *Machine) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Machine) GetResourceState() State {
	if x != nil {
		return x.ResourceState
	}
	return State_STATE_UNSPECIFIED
}

func (x *Machine) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

type isMachine_Device interface {
	isMachine_Device()
}

type Machine_ChromeBrowserMachine struct {
	// Chrome Browser Machine
	ChromeBrowserMachine *ChromeBrowserMachine `protobuf:"bytes,4,opt,name=chrome_browser_machine,json=chromeBrowserMachine,proto3,oneof"`
}

type Machine_ChromeosMachine struct {
	// Chrome OS Machine. The registration system will subscribe to the HaRT system,
	// and automatically get it using Machine name once a machine gets recorded.
	ChromeosMachine *ChromeOSMachine `protobuf:"bytes,5,opt,name=chromeos_machine,json=chromeosMachine,proto3,oneof"`
}

type Machine_AttachedDevice struct {
	// Attached Device. Device data for any USB-attached devices.
	AttachedDevice *AttachedDevice `protobuf:"bytes,11,opt,name=attached_device,json=attachedDevice,proto3,oneof"`
}

type Machine_Devboard struct {
	// Development board, e.g., Andreiboard
	Devboard *Devboard `protobuf:"bytes,13,opt,name=devboard,proto3,oneof"`
}

func (*Machine_ChromeBrowserMachine) isMachine_Device() {}

func (*Machine_ChromeosMachine) isMachine_Device() {}

func (*Machine_AttachedDevice) isMachine_Device() {}

func (*Machine_Devboard) isMachine_Device() {}

// ChromeBrowserMachine refers to bare metal servers in Chrome Browser lab
type ChromeBrowserMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Descriptive name of Chrome Machine
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Should match one of the predefined Chrome Platforms.
	// Refers to ChromePlatform name
	ChromePlatform string `protobuf:"bytes,2,opt,name=chrome_platform,json=chromePlatform,proto3" json:"chrome_platform,omitempty"`
	// Interface of its connected devices.
	KvmInterface *KVMInterface `protobuf:"bytes,4,opt,name=kvm_interface,json=kvmInterface,proto3" json:"kvm_interface,omitempty"`
	RpmInterface *RPMInterface `protobuf:"bytes,5,opt,name=rpm_interface,json=rpmInterface,proto3" json:"rpm_interface,omitempty"`
	// Usually it's a buganizer bug.
	DeploymentTicket string `protobuf:"bytes,8,opt,name=deployment_ticket,json=deploymentTicket,proto3" json:"deployment_ticket,omitempty"`
	// Can be covered by deployment_ticket
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	NicObjects  []*Nic `protobuf:"bytes,11,rep,name=nic_objects,json=nicObjects,proto3" json:"nic_objects,omitempty"`
	DracObject  *Drac  `protobuf:"bytes,12,opt,name=drac_object,json=dracObject,proto3" json:"drac_object,omitempty"`
}

func (x *ChromeBrowserMachine) Reset() {
	*x = ChromeBrowserMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeBrowserMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeBrowserMachine) ProtoMessage() {}

func (x *ChromeBrowserMachine) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeBrowserMachine.ProtoReflect.Descriptor instead.
func (*ChromeBrowserMachine) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{1}
}

func (x *ChromeBrowserMachine) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ChromeBrowserMachine) GetChromePlatform() string {
	if x != nil {
		return x.ChromePlatform
	}
	return ""
}

func (x *ChromeBrowserMachine) GetKvmInterface() *KVMInterface {
	if x != nil {
		return x.KvmInterface
	}
	return nil
}

func (x *ChromeBrowserMachine) GetRpmInterface() *RPMInterface {
	if x != nil {
		return x.RpmInterface
	}
	return nil
}

func (x *ChromeBrowserMachine) GetDeploymentTicket() string {
	if x != nil {
		return x.DeploymentTicket
	}
	return ""
}

func (x *ChromeBrowserMachine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChromeBrowserMachine) GetNicObjects() []*Nic {
	if x != nil {
		return x.NicObjects
	}
	return nil
}

func (x *ChromeBrowserMachine) GetDracObject() *Drac {
	if x != nil {
		return x.DracObject
	}
	return nil
}

// ChromeOSMachine refers duts and servers in Chrome OS lab
type ChromeOSMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All infos come from the HaRT system.
	// used by referencing device config.
	ReferenceBoard string `protobuf:"bytes,1,opt,name=reference_board,json=referenceBoard,proto3" json:"reference_board,omitempty"`
	// used by ChromeOS build system.
	BuildTarget string `protobuf:"bytes,2,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	Model       string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Chromebook, labstation, servo, â€¦
	DeviceType ChromeOSDeviceType `protobuf:"varint,4,opt,name=device_type,json=deviceType,proto3,enum=unifiedfleet.api.v1.models.ChromeOSDeviceType" json:"device_type,omitempty"`
	// Used internally, Different boards/models could share the same name.
	GoogleCodeName string `protobuf:"bytes,5,opt,name=google_code_name,json=googleCodeName,proto3" json:"google_code_name,omitempty"`
	// HaRT doesn't guarantee its existence.
	MacAddress string `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// User not allowed to update this field. SSW will update this field.
	Sku string `protobuf:"bytes,7,opt,name=sku,proto3" json:"sku,omitempty"`
	// Phase of the device [PVT, EVT, etc,.] if available.
	Phase string `protobuf:"bytes,8,opt,name=phase,proto3" json:"phase,omitempty"`
	// Cost center associated with the asset.
	CostCenter string `protobuf:"bytes,9,opt,name=cost_center,json=costCenter,proto3" json:"cost_center,omitempty"`
	// The manufacturing ID for a given DUT
	// User not allowed to update this field. SSW will update this field.
	Hwid string `protobuf:"bytes,10,opt,name=hwid,proto3" json:"hwid,omitempty"`
	// GPN stands for Google Part Number, unique identifier for the device
	Gpn string `protobuf:"bytes,11,opt,name=gpn,proto3" json:"gpn,omitempty"`
}

func (x *ChromeOSMachine) Reset() {
	*x = ChromeOSMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeOSMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeOSMachine) ProtoMessage() {}

func (x *ChromeOSMachine) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeOSMachine.ProtoReflect.Descriptor instead.
func (*ChromeOSMachine) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{2}
}

func (x *ChromeOSMachine) GetReferenceBoard() string {
	if x != nil {
		return x.ReferenceBoard
	}
	return ""
}

func (x *ChromeOSMachine) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *ChromeOSMachine) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChromeOSMachine) GetDeviceType() ChromeOSDeviceType {
	if x != nil {
		return x.DeviceType
	}
	return ChromeOSDeviceType_CHROME_OS_DEVICE_TYPE_UNSPECIFIED
}

func (x *ChromeOSMachine) GetGoogleCodeName() string {
	if x != nil {
		return x.GoogleCodeName
	}
	return ""
}

func (x *ChromeOSMachine) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ChromeOSMachine) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *ChromeOSMachine) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ChromeOSMachine) GetCostCenter() string {
	if x != nil {
		return x.CostCenter
	}
	return ""
}

func (x *ChromeOSMachine) GetHwid() string {
	if x != nil {
		return x.Hwid
	}
	return ""
}

func (x *ChromeOSMachine) GetGpn() string {
	if x != nil {
		return x.Gpn
	}
	return ""
}

// AttachedDevice refers to attached devices in the labs.
//
// Next Tag: 5
type AttachedDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Manufacturer of the device. E.g. Apple, Samsung.
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Device type of the device. E.g. iPad, Android phone, Android tablet.
	DeviceType AttachedDeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=unifiedfleet.api.v1.models.AttachedDeviceType" json:"device_type,omitempty"`
	// Reference board of the device. E.g. goldfish, bravo, GT-I9000
	BuildTarget string `protobuf:"bytes,3,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// Model of the device aka product in some cases. E.g. Nexus One, GT-I9000
	Model string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *AttachedDevice) Reset() {
	*x = AttachedDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDevice) ProtoMessage() {}

func (x *AttachedDevice) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDevice.ProtoReflect.Descriptor instead.
func (*AttachedDevice) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{3}
}

func (x *AttachedDevice) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AttachedDevice) GetDeviceType() AttachedDeviceType {
	if x != nil {
		return x.DeviceType
	}
	return AttachedDeviceType_ATTACHED_DEVICE_TYPE_UNSPECIFIED
}

func (x *AttachedDevice) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *AttachedDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Devboard refers to development boards for component firmware testing.
//
// Next Tag: 2
type Devboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Board:
	//	*Devboard_Andreiboard
	//	*Devboard_Icetower
	Board isDevboard_Board `protobuf_oneof:"board"`
}

func (x *Devboard) Reset() {
	*x = Devboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Devboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Devboard) ProtoMessage() {}

func (x *Devboard) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Devboard.ProtoReflect.Descriptor instead.
func (*Devboard) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{4}
}

func (m *Devboard) GetBoard() isDevboard_Board {
	if m != nil {
		return m.Board
	}
	return nil
}

func (x *Devboard) GetAndreiboard() *Andreiboard {
	if x, ok := x.GetBoard().(*Devboard_Andreiboard); ok {
		return x.Andreiboard
	}
	return nil
}

func (x *Devboard) GetIcetower() *Icetower {
	if x, ok := x.GetBoard().(*Devboard_Icetower); ok {
		return x.Icetower
	}
	return nil
}

type isDevboard_Board interface {
	isDevboard_Board()
}

type Devboard_Andreiboard struct {
	Andreiboard *Andreiboard `protobuf:"bytes,1,opt,name=andreiboard,proto3,oneof"`
}

type Devboard_Icetower struct {
	Icetower *Icetower `protobuf:"bytes,2,opt,name=icetower,proto3,oneof"`
}

func (*Devboard_Andreiboard) isDevboard_Board() {}

func (*Devboard_Icetower) isDevboard_Board() {}

// Andreiboard refers to andreiboard type development boards.
//
// Next Tag: 2
type Andreiboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serial for the UltraDebug interface.
	// Can be empty if the devboard does not have UltraDebug.
	UltradebugSerial string `protobuf:"bytes,1,opt,name=ultradebug_serial,json=ultradebugSerial,proto3" json:"ultradebug_serial,omitempty"`
}

func (x *Andreiboard) Reset() {
	*x = Andreiboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Andreiboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Andreiboard) ProtoMessage() {}

func (x *Andreiboard) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Andreiboard.ProtoReflect.Descriptor instead.
func (*Andreiboard) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{5}
}

func (x *Andreiboard) GetUltradebugSerial() string {
	if x != nil {
		return x.UltradebugSerial
	}
	return ""
}

// Icetower refers to icetower type development boards.
//
// Next Tag: 2
type Icetower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fingerprint module ID.
	FingerprintId string `protobuf:"bytes,1,opt,name=fingerprint_id,json=fingerprintId,proto3" json:"fingerprint_id,omitempty"`
}

func (x *Icetower) Reset() {
	*x = Icetower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Icetower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Icetower) ProtoMessage() {}

func (x *Icetower) ProtoReflect() protoreflect.Message {
	mi := &file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Icetower.ProtoReflect.Descriptor instead.
func (*Icetower) Descriptor() ([]byte, []int) {
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP(), []int{6}
}

func (x *Icetower) GetFingerprintId() string {
	if x != nil {
		return x.FingerprintId
	}
	return ""
}

var File_infra_unifiedfleet_api_v1_models_machine_proto protoreflect.FileDescriptor

var file_infra_unifiedfleet_api_v1_models_machine_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x70, 0x65, 0x72,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x06, 0x0a,
	0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x16, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x5d, 0x0a,
	0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x6f, 0x73, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x55, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x3a, 0x41, 0xea, 0x41, 0x3e, 0x0a,
	0x28, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x7d, 0x42, 0x08, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x14, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5d, 0x0a, 0x0f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xfa, 0x41, 0x31, 0x0a, 0x2f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x4d, 0x0a, 0x0d, 0x6b, 0x76, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4b, 0x56, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x0c, 0x6b, 0x76, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x4d,
	0x0a, 0x0d, 0x72, 0x70, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x52, 0x50, 0x4d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0c, 0x72, 0x70, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b,
	0x6e, 0x69, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4e,
	0x69, 0x63, 0x52, 0x0a, 0x6e, 0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0b, 0x64, 0x72, 0x61, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x44, 0x72, 0x61, 0x63, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x03, 0x6e, 0x69, 0x63, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x73, 0x52, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04,
	0x64, 0x72, 0x61, 0x63, 0x22, 0x88, 0x03, 0x0a, 0x0f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4f,
	0x53, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x77, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x68, 0x77, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x70, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x70, 0x6e, 0x22,
	0xbe, 0x01, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x75, 0x6e,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x22, 0xa4, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x4b, 0x0a,
	0x0b, 0x61, 0x6e, 0x64, 0x72, 0x65, 0x69, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x65, 0x69, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x6e, 0x64, 0x72, 0x65, 0x69, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x63,
	0x65, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x49, 0x63, 0x65, 0x74, 0x6f, 0x77,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x69, 0x63, 0x65, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x3a, 0x0a, 0x0b, 0x41, 0x6e, 0x64, 0x72, 0x65,
	0x69, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x22, 0x31, 0x0a, 0x08, 0x49, 0x63, 0x65, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0x7b, 0x0a, 0x12, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x4f, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21,
	0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x4f, 0x53, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48,
	0x52, 0x4f, 0x4d, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x4f, 0x10, 0x03, 0x2a, 0x9f, 0x02, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e,
	0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x45, 0x54, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x10, 0x06, 0x42, 0x28, 0x5a, 0x26, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2f, 0x75,
	0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3b, 0x75, 0x66, 0x73, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescOnce sync.Once
	file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescData = file_infra_unifiedfleet_api_v1_models_machine_proto_rawDesc
)

func file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescGZIP() []byte {
	file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescOnce.Do(func() {
		file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescData = protoimpl.X.CompressGZIP(file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescData)
	})
	return file_infra_unifiedfleet_api_v1_models_machine_proto_rawDescData
}

var file_infra_unifiedfleet_api_v1_models_machine_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_infra_unifiedfleet_api_v1_models_machine_proto_goTypes = []interface{}{
	(ChromeOSDeviceType)(0),       // 0: unifiedfleet.api.v1.models.ChromeOSDeviceType
	(AttachedDeviceType)(0),       // 1: unifiedfleet.api.v1.models.AttachedDeviceType
	(*Machine)(nil),               // 2: unifiedfleet.api.v1.models.Machine
	(*ChromeBrowserMachine)(nil),  // 3: unifiedfleet.api.v1.models.ChromeBrowserMachine
	(*ChromeOSMachine)(nil),       // 4: unifiedfleet.api.v1.models.ChromeOSMachine
	(*AttachedDevice)(nil),        // 5: unifiedfleet.api.v1.models.AttachedDevice
	(*Devboard)(nil),              // 6: unifiedfleet.api.v1.models.Devboard
	(*Andreiboard)(nil),           // 7: unifiedfleet.api.v1.models.Andreiboard
	(*Icetower)(nil),              // 8: unifiedfleet.api.v1.models.Icetower
	(*Location)(nil),              // 9: unifiedfleet.api.v1.models.Location
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(State)(0),                    // 11: unifiedfleet.api.v1.models.State
	(*KVMInterface)(nil),          // 12: unifiedfleet.api.v1.models.KVMInterface
	(*RPMInterface)(nil),          // 13: unifiedfleet.api.v1.models.RPMInterface
	(*Nic)(nil),                   // 14: unifiedfleet.api.v1.models.Nic
	(*Drac)(nil),                  // 15: unifiedfleet.api.v1.models.Drac
}
var file_infra_unifiedfleet_api_v1_models_machine_proto_depIdxs = []int32{
	9,  // 0: unifiedfleet.api.v1.models.Machine.location:type_name -> unifiedfleet.api.v1.models.Location
	3,  // 1: unifiedfleet.api.v1.models.Machine.chrome_browser_machine:type_name -> unifiedfleet.api.v1.models.ChromeBrowserMachine
	4,  // 2: unifiedfleet.api.v1.models.Machine.chromeos_machine:type_name -> unifiedfleet.api.v1.models.ChromeOSMachine
	5,  // 3: unifiedfleet.api.v1.models.Machine.attached_device:type_name -> unifiedfleet.api.v1.models.AttachedDevice
	6,  // 4: unifiedfleet.api.v1.models.Machine.devboard:type_name -> unifiedfleet.api.v1.models.Devboard
	10, // 5: unifiedfleet.api.v1.models.Machine.update_time:type_name -> google.protobuf.Timestamp
	11, // 6: unifiedfleet.api.v1.models.Machine.resource_state:type_name -> unifiedfleet.api.v1.models.State
	12, // 7: unifiedfleet.api.v1.models.ChromeBrowserMachine.kvm_interface:type_name -> unifiedfleet.api.v1.models.KVMInterface
	13, // 8: unifiedfleet.api.v1.models.ChromeBrowserMachine.rpm_interface:type_name -> unifiedfleet.api.v1.models.RPMInterface
	14, // 9: unifiedfleet.api.v1.models.ChromeBrowserMachine.nic_objects:type_name -> unifiedfleet.api.v1.models.Nic
	15, // 10: unifiedfleet.api.v1.models.ChromeBrowserMachine.drac_object:type_name -> unifiedfleet.api.v1.models.Drac
	0,  // 11: unifiedfleet.api.v1.models.ChromeOSMachine.device_type:type_name -> unifiedfleet.api.v1.models.ChromeOSDeviceType
	1,  // 12: unifiedfleet.api.v1.models.AttachedDevice.device_type:type_name -> unifiedfleet.api.v1.models.AttachedDeviceType
	7,  // 13: unifiedfleet.api.v1.models.Devboard.andreiboard:type_name -> unifiedfleet.api.v1.models.Andreiboard
	8,  // 14: unifiedfleet.api.v1.models.Devboard.icetower:type_name -> unifiedfleet.api.v1.models.Icetower
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_infra_unifiedfleet_api_v1_models_machine_proto_init() }
func file_infra_unifiedfleet_api_v1_models_machine_proto_init() {
	if File_infra_unifiedfleet_api_v1_models_machine_proto != nil {
		return
	}
	file_infra_unifiedfleet_api_v1_models_location_proto_init()
	file_infra_unifiedfleet_api_v1_models_peripherals_proto_init()
	file_infra_unifiedfleet_api_v1_models_network_proto_init()
	file_infra_unifiedfleet_api_v1_models_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeBrowserMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeOSMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Devboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Andreiboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Icetower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Machine_ChromeBrowserMachine)(nil),
		(*Machine_ChromeosMachine)(nil),
		(*Machine_AttachedDevice)(nil),
		(*Machine_Devboard)(nil),
	}
	file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Devboard_Andreiboard)(nil),
		(*Devboard_Icetower)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_infra_unifiedfleet_api_v1_models_machine_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_infra_unifiedfleet_api_v1_models_machine_proto_goTypes,
		DependencyIndexes: file_infra_unifiedfleet_api_v1_models_machine_proto_depIdxs,
		EnumInfos:         file_infra_unifiedfleet_api_v1_models_machine_proto_enumTypes,
		MessageInfos:      file_infra_unifiedfleet_api_v1_models_machine_proto_msgTypes,
	}.Build()
	File_infra_unifiedfleet_api_v1_models_machine_proto = out.File
	file_infra_unifiedfleet_api_v1_models_machine_proto_rawDesc = nil
	file_infra_unifiedfleet_api_v1_models_machine_proto_goTypes = nil
	file_infra_unifiedfleet_api_v1_models_machine_proto_depIdxs = nil
}
