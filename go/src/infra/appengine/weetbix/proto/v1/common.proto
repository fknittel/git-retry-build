// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package weetbix.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

option go_package = "infra/appengine/weetbix/proto/v1;weetbixpb";

// A range of timestamps.
message TimeRange {
  // The oldest timestamp to include in the range.
  google.protobuf.Timestamp earliest = 1;

  // Include only timestamps that are strictly older than this.
  google.protobuf.Timestamp latest = 2;
}

// Identity of a test result.
message TestResultId {
  // The test results system.
  // Currently, the only valid value is "resultdb".
  string system = 1;

  // ID for the test result in the test results system.
  // For test results in ResultDB, the format is:
  // "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}"
  // Where INVOCATION_ID, URL_ESCAPED_TEST_ID and RESULT_ID are values defined
  // in ResultDB.
  string id = 2;
}

// Variant represents a way of running a test case.
//
// The same test case can be executed in different ways, for example on
// different OS, GPUs, with different compile options or runtime flags.
message Variant {
  // The definition of the variant. Each key-value pair represents a
  // parameter describing how the test was run (e.g. OS, GPU, etc.).
  map<string, string> def = 1;
}

message StringPair {
  // Regex: ^[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*$
  // Max length: 64.
  string key = 1;

  // Max length: 256.
  string value = 2;
}

// Identity of a bug tracking component in a bug tracking system.
message BugTrackingComponent {
  // The bug tracking system corresponding to this test case, as identified
  // by the test results system.
  // Currently, the only valid value is "monorail".
  string system = 1;

  // The bug tracking component corresponding to this test case, as identified
  // by the test results system.
  // If the bug tracking system is monorail, this is the component as the
  // user would see it, e.g. "Infra>Test>Flakiness". For monorail, the bug
  // tracking project (e.g. "chromium") is not encoded, but assumed to be
  // specified in the project's Weetbix configuration.
  string component = 2;
}

// Identity of a presubmit run (also known as a "CQ Run" or "CV Run").
message PresubmitRunId {
  // The system that was used to process the presubmit run.
  // Currently, the only valid value is "luci-cv" for LUCI Commit Verifier
  // (LUCI CV).
  string system = 1;

  // Identity of the presubmit run.
  // If the presubmit system is LUCI CV, the format of this value is:
  //   "{LUCI_PROJECT}/{LUCI_CV_ID}", e.g.
  //   "infra/8988819463854-1-f94732fe20056fd1".
  string id = 2;
}

// Identity of a bug in a bug-tracking system.
message AssociatedBug {
  // System is the bug tracking system of the bug. This is either
  // "monorail" or "buganizer".
  string system = 1;

  // Id is the bug tracking system-specific identity of the bug.
  // For monorail, the scheme is {project}/{numeric_id}, for
  // buganizer the scheme is {numeric_id}.
  string id = 2;

  // A human-readable name for the bug. This is typically the
  // bug shortlink (e.g. "crbug.com/1234567").
  string link_text = 3
    [(google.api.field_behavior) = OUTPUT_ONLY];

  // The resolved bug URL, e.g.
  // E.g. "https://bugs.chromium.org/p/chromium/issues/detail?id=123456".
  string url = 4
    [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ClusterId represents the identity of a cluster. The LUCI Project is
// omitted as it is assumed to be implicit from the context.
//
// This is often used in place of the resource name of the cluster
// (in the sense of https://google.aip.dev/122) as clients may need
// to access individual parts of the resource name (e.g. to determine
// the algorithm used) and it is not desirable to make clients parse
// the resource name.
message ClusterId {
  // Algorithm is the name of the clustering algorithm that identified
  // the cluster.
  string algorithm = 1;

  // Id is the cluster identifier returned by the algorithm. The underlying
  // identifier is at most 16 bytes, but is represented here as a hexadecimal
  // string of up to 32 lowercase hexadecimal characters.
  string id = 2;
}

// ExonerationStatus explains if and why a test failure was
// exonerated. Exonerated means the failure was ignored and did not
// have further impact, in terms of causing the build to fail or
// rejecting the CL being tested in a presubmit run.
enum ExonerationStatus {
  // A test failure must not have this status.
  EXONERATION_STATUS_UNSPECIFIED = 0;

  // The test was not exonerated.
  NOT_EXONERATED = 1;

  // The unexpected failure was discounted despite
  // having an unexpected result and no exoneration recorded
  // in Result DB. For example, because the build passed or
  // was cancelled.
  IMPLICIT = 2;

  // The test was marked exonerated in ResultDB, for a reason
  // other than Weetbix or FindIt failure analysis.
  // If a test is exonerated in ResultDB for both reasons
  // other than Weetbix/FindIt and because of Weetbix/FindIt,
  // this status takes precedence.
  EXPLICIT = 3;

  // The test was exonerated based on Weetbix cluster analysis.
  // This status is only set if Weetbix is the only explicit
  // reason(s) given for the exoneration in ResultDB.
  //
  // This status is provided to avoid feedback loops in the
  // cluster analysis performed by Weetbix, by allowing Weetbix to
  // filter out exoneration decisions based on such analysis from
  // feeding back into the input of the analysis.
  //
  // Example of a situation we want to avoid:
  // Weetbix detects an impactful cluster of failures
  // affecting multiple CLs and cause a recipe to exonerate it.
  // As a result, Weetbix no longer detects the cluster as impactful.
  // As a result, the cluster is no longer exonerated.
  // As a result, the impact resumes.
  //
  // During the transition from FindIt to Weetbix for failure
  // exoneration, exonerations caused by FindIt will be treated
  // the same as exonerations caused by Weetbix, to ensure Weetbix
  // behaves as if FindIt no longer exists.
  WEETBIX = 4;
}
